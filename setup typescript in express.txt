https://blog.logrocket.com/how-to-set-up-node-typescript-express/
------------------------------------------------------------------------------------------
- Run "npm init --yes" command to create a package.json with the default config. 
  {
  "name": "project-name",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "type": "module",
  "keywords": [],
  "author": "",
  "license": "ISC"
  }  
------------------------------------------------------------------------------------------
- Run "npm install express dotenv" to intall express and dotenv dependency to use environment variables.
------------------------------------------------------------------------------------------
- Create an "index.js" file at the root of the project to create a minimal server wit Express.

  const express = require('express');
  const dotenv = require('dotenv');

  dotenv.config();

  const app = express();
  const port = process.env.PORT;

  app.get('/', (req, res) => {
    res.send('Express + TypeScript Server');
  });

  app.listen(port, () => {
    console.log(`[server]: Server is running at https://localhost:${port}`);
  });
------------------------------------------------------------------------------------------
- Create a ".env" file and create the environment varible for PORT=8000.
------------------------------------------------------------------------------------------
- To start the server, run "node index.js" command.
------------------------------------------------------------------------------------------
- Run "npm i -D typescript @types/express @types/node" command to install Typescript as a dev dependency.
  also, will be installed the @type delcaration packages for Express and Node.js

  The -D flag, also known as the --dev flag, is a specification for the package manager to install these 
  libraries as devDependencies.
------------------------------------------------------------------------------------------
- Run "npx tsc --init" command to create the tsconfig.json file at the root of the project
  The command above will generate a new file called tsconfig.json with the following default compiler options:

  target: es2016
  module: commonjs
  strict: true
  esModuleInterop: true
  skipLibCheck: true
  forceConsistentCasingInFileNames: true

  One option that you will have to enable is called outDir, which specifies where the output will be located 
  after the compilation step. You can search for this option in the tsconfig.json file and uncomment it.
  
  "outDir": "dist"
------------------------------------------------------------------------------------------
- Now, you can easily convert the minimal server code in index.js to an index.ts file.
  First, rename the file to index.ts. The .ts extension is a file extension that determines what 
  TypeScript files are compiled to JavaScript files later when we build the server.

  Open the index.ts file and modify it, as shown below:

  import express, { Express, Request, Response } from 'express';
  import dotenv from 'dotenv';

  dotenv.config();

  const app: Express = express();
  const port = process.env.PORT;

  app.get('/', (req: Request, res: Response) => {
    res.send('Express + TypeScript Server');
  });

  app.listen(port, () => {
    console.log(`⚡️[server]: Server is running at https://localhost:${port}`);
  });
------------------------------------------------------------------------------------------
- run "npm install -D concurrently nodemon" to install nodemon dependency
  update the "scripts" in the package.json file:

  {
    "scripts": {
      "build": "npx tsc",
      "start": "node dist/index.js",
      "dev": "concurrently \"npx tsc --watch\" \"nodemon -q dist/index.js\""
     }
  }

  The build command will compile the code in JavaScript inside a dist directory. 
  The dev command is used to run the Node.js server in development mode.

  



 